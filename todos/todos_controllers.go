/*
 * Symbolic Boilerplate
 *
 * An API spec for managing todo lists
 *
 * API version: 1.0.0
 * Contact: contact@simonball.me
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package todos

import (
	"fmt"
	"github.com/symball/go-gin-boilerplate/lib"
	"net/http"

	"github.com/gin-gonic/gin"
)

// TodosGet - Get a listing of todo in system
func TodosGet(c *gin.Context) {
	todos, err := GetAll(c)
	if err != nil {
		fmt.Printf(err.Error())
		_ = c.AbortWithError(http.StatusInternalServerError, err)
		return
	}

	var todoListing = make([]TodoListing, len(todos))
	for idx, todo := range todos {
		todoListing[idx] = *TodoToListing(&todo)
	}
	c.JSON(http.StatusOK, TodosGet200Response{
		Message: "todosGetAll",
		Data:    todoListing,
	})
}

// TodosGetById - Get detailed information about a particular todo
func TodosDeleteById(c *gin.Context) {

	uri := TodosIdURI{}
	if err := c.ShouldBindUri(&uri); err != nil {
		c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"errors": "TodoId required and a number"})
		return
	}

	todo, err := GetOneById(c, uri.TodoId)
	if err != nil {
		fmt.Printf("Error: %v", err)
		c.AbortWithStatus(http.StatusNotFound)
		return
	}

	if deleteErr := Delete(c, todo); deleteErr != nil {
		fmt.Printf(deleteErr.Error())
		_ = c.AbortWithError(http.StatusInternalServerError, deleteErr)
		return
	}

	c.JSON(http.StatusOK, gin.H{"status": "OK"})
}

// TodosGetById - Get detailed information about a particular todo
func TodosGetById(c *gin.Context) {

	uri := TodosIdURI{}
	if err := c.ShouldBindUri(&uri); err != nil {
		c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"errors": "TodoId required and a number"})
		return
	}

	todo, err := GetOneById(c, uri.TodoId)
	if err != nil {
		fmt.Printf("Error: %v", err)
		c.AbortWithStatus(http.StatusNotFound)
		return
	}

	c.JSON(http.StatusOK, TodosGetById200Response{
		Message: "TodosGetById",
		Data:    *todo,
	})
}

// TodosPost - Create a new todo in system
func TodosPost(c *gin.Context) {

	var newTodo TodosPostRequest
	if errors := c.ShouldBindJSON(&newTodo); errors != nil {
		outPutData := lib.HandleValidationErrors(errors)
		c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"errors": outPutData})
		return
	}
	todo := *TodoPostToTodo(&newTodo)
	if _, err := Add(c, &todo); err != nil {
		fmt.Printf(err.Error())
	}

	c.JSON(http.StatusOK, TodosPost200Response{
		Message: "todosPost",
		Data:    todo,
	})
}

// TodosPutById - Update a particular todo
func TodosPutById(c *gin.Context) {

	uri := TodosIdURI{}
	if err := c.ShouldBindUri(&uri); err != nil {
		c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"errors": "TodoId required and a number"})
		return
	}

	var putTodo TodosPutByIdRequest
	if errors := c.ShouldBindJSON(&putTodo); errors != nil {
		outPutData := lib.HandleValidationErrors(errors)
		c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"errors": outPutData})
	}

	todo, err := GetOneById(c, uri.TodoId)
	if err != nil {
		fmt.Printf("Error: %v", err)
		c.AbortWithStatus(http.StatusNotFound)
		return
	}
	if putTodo.Title != "" {
		todo.Title = putTodo.Title
	}
	if putTodo.Content != "" {
		todo.Content = putTodo.Content
	}
	todo.Complete = putTodo.Complete

	_, updateErr := Update(c, todo)
	if updateErr != nil {
		fmt.Printf(updateErr.Error())
		_ = c.AbortWithError(http.StatusInternalServerError, updateErr)
		return
	}

	c.JSON(http.StatusOK, TodosPutById200Response{
		Message: "todosPut",
		Data:    *todo,
	})
}
